#!/usr/bin/env bash
test_1_kb_dir_exist() {
    dir="/var/lib/ldb/test_kb"
    assert "test -e $dir"
}

test_2_kb_content() {
    assert_equals "9" $(echo "dump test_kb/file hex 32" | ../ldb | wc -l) "file table fails"
    assert_equals "7" $(echo "dump test_kb/url hex 16" | ../ldb | wc -l) "url table fails"
    assert_equals "5" $(echo "dump test_kb/pivot hex 32" |../ldb | wc -l) "pivot table fails"
}

test_3_kb_query() {
    result=$(echo "select from test_kb/file key 00000000000000000000000000000001 csv hex 32" | ../ldb) 
    assert_equals "00000000000000000000000000000001,ca80efeae39f6de1dc102fb0fd9df8e1,test1/file/to/see/if/the/fisrt/record/is/imported0.test" $result "file table query fails"
    result=$(echo "select from test_kb/url key ca80efeae39f6de1dc102fb0fd9df8e2 csv hex 16" | ../ldb) 
    assert_equals "ca80efeae39f6de1dc102fb0fd9df8e2,test_vendor,test_component,1.0.0_test,2023-11-03,my_license,pkg:test_vendor/test_component,https://testurl.com/download3.zip" $result "url table quert fails"
    result=$(echo "select from test_kb/sources key b377b77401a8bfbef9ea316787ebda99 csv hex 16" | ../ldb | tr -cd '[:print:]')
    comp="Manifest-Version: 1.0Implementation-Title: jsonapi-scala-akka-clientImplementation-Version: 6.0.1Specification-Vendor: com.qvantelSpecification-Title: jsonapi-scala-akka-clientImplementation-Vendor-Id: com.qvantelSpecification-Version: 6.0.1Implementation-URL: https://github.com/qvantel/jsonapi-scalaImplementation-Vendor: com.qvantel"
    assert_equals "$comp" "$result"
}

test_4_kb_delete_record() {
    echo "delete from test_kb/url records from source/test_remove_record.txt" | ../ldb -q 
    result=$(echo "select from test_kb/url key ba80efeae39f6de1dc102fb0fd9df8e1 csv hex 16" | ../ldb -q) 
    assert_equals "ba80efeae39f6de1dc102fb0fd9df8e1,test_vendor,test_component,1.0.0_test,2023-11-03,my_license,pkg:test_vendor/test_component,https://testurl.com/download2.zip" $result
    result=$(echo "select from test_kb/url key ca80efeae39f6de1dc102fb0fd9df8e2 csv hex 16" | ../ldb -q)
    assert_equals "" $result
}

test_5_kb_delete_keys() {
    echo "delete from test_kb/file max 2048 keys 00100000000000000000000000000001,85100000000000000000000000000001,b3100000000000000000000000000001" | ../ldb -q
    result=$(echo "select from test_kb/file key 00100000000000000000000000000001 csv hex 32" | ../ldb)
    result+=$(echo "select from test_kb/file key 85100000000000000000000000000001 csv hex 32" | ../ldb)
    result+=$(echo "select from test_kb/file key b3100000000000000000000000000001 csv hex 32" | ../ldb)
    assert_equals "" $result
    echo "delete from test_kb/sources max 2048 keys b377b77401a8bfbef9ea316787ebda99,8f2b281315bc8e923df7006b3d93e1cf" | ../ldb -q
    result=$(echo "select from test_kb/sources key b377b77401a8bfbef9ea316787ebda99 csv hex 16" | ../ldb)
    result+=$(echo "select from test_kb/sources key 8f2b281315bc8e923df7006b3d93e1cf csv hex 16" | ../ldb)
    assert_equals "" $result
}

#import again, but with the collate option, so the duplicated will be removed. Then test again the content.
test_6_kb_collate() {
    ../ldb -q -u source/mined -n test_kb -c
    test_2_kb_content
}

test_7_kb_query_from_file() {
    result=$(../ldb -f source/test_file_commands.txt | wc -l)
    assert_equals "21" $result
}

test_8_unicode_chars() {
    result=$(echo "select from test_kb/file key b337487d67c0307bb9d009e2b5e248c8 csv hex 32" | ../ldb) 
    assert_equals "b337487d67c0307bb9d009e2b5e248c8,e7bc2c903379c1eda3ec7a12e88b933d,系列1-MyBatis源码解析/第10节课/mybatis-3-master/src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSourceBuilder.java" $result
}

setup_suite () {
    ../ldb -u source/mined -n test_kb
}
teardown_suite () {
    rm -rf /var/lib/ldb/test_kb
    rm -rf /usr/local/etc/scanoss/ldb/test_kb.conf
}